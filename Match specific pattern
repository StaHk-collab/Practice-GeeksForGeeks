Given a dictionary of words and a pattern. Every character in the pattern is uniquely mapped to a character in the dictionary. Find all such words in the dictionary that match the
given pattern. 

Example 1:

Input:
N = 4
dict[] = {abb,abc,xyz,xyy}
pattern  = foo
Output: abb xyy
Explanation: xyy and abb have the same
character at index 1 and 2 like the
pattern.

Your Task:
You don't need to read input or print anything. Your task is to complete the function findMatchedWords() which takes an array of strings dict[] consisting of the words in the
dictionary and a string, Pattern and returns an array of strings consisting of all the words in the dict[] that match the given Pattern in lexicographical order.

Expected Time Complexity: O(N*K) (where K is the length of the pattern).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 10

Solution :

/* The function returns a  vector of strings 
present in the dictionary which matches
the string pattern.
You are required to complete this method */


string encodeString(string str) {
    unordered_map<char, int> map;
    int i = 0;
    string res = "";
    for(char ch : str) {
        if(map.find(ch) == map.end())
        map[ch] = i++;
        res += to_string(map[ch]);
    }
    return res;
}


vector<string> findMatchedWords(vector<string> dict,string pattern)
{
    vector<string> v;
       int len = pattern.length();
       string hash = encodeString(pattern);
       for(string word : dict) {
           if(word.length() == len && encodeString(word) == hash)
           v.push_back(word);
       }
       return v;
}
