Given a string without spaces, the task is to remove duplicates from it.

Note: The original order of characters must be kept the same. 

Example 1:

Input: S = "zvvo"
Output: "zvo"
Explanation: Only keep the first
occurrence

Example 2:

Input: S = "gfg"
Output: gf
Explanation: Only keep the first
occurrence

Your task:
Your task is to complete the function removeDups() which takes a single string as input and returns the string. You need not take any input or print anything.
 

Expected Time Complexity: O(|s|)
Expected Auxiliary Space: O(constant)

Constraints:
1 <= |S| <= 10^5
S conatins lowercase english alphabets

Solution :

class Solution{
public:	
		
	string removeDups(string str) 
	{
	    // Table to keep track of visited characters
    vector<int> table(256, 0);                      // table = {0, 0, ....., 0}
    vector<char> chars;
     
    for(auto i : str)
        chars.push_back(i);                       // chars = {z, v, v, o}
     
    // To keep track of end index of
    // resultant string
    int endIndex = 0;     // str = zvvo
     
    for(int i = 0; i < chars.size(); i++)   
    {                                       
        if (table[chars[i]] == 0)                // table['z'] -> table[122] = -1, table['v'] -> table[118] = -1
        {                                     // table['o'] -> table[111] = -1
            table[chars[i]] = -1;
            chars[endIndex++] = chars[i];     // chars[0] = 'z', chars[1] = 'v', chars[2] = 'o'
        }
    }
     
    string ans = "";
     
    for(int i = 0; i < endIndex; i++)
        ans += chars[i];
     
    return ans;
	}
};
