Given an integer x, find the square root of x. If x is not a perfect square, then return floor(√x).

 

Example 1:

Input:
x = 5
Output: 2
Explanation: Since, 5 is not a perfect 
square, floor of square_root of 5 is 2.

Example 2:

Input:
x = 4
Output: 2
Explanation: Since, 4 is a perfect 
square, so its square root is 2.

 

Your Task:
You don't need to read input or print anything. The task is to complete the function floorSqrt() which takes x as the input parameter and return its square root.
Note: Try Solving the question without using sqrt Function.

 

Expected Time Complexity: O(log N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 ≤ x ≤ 10^7

Solution :

class Solution{
  public:
    long long int floorSqrt(long long int x) 
    {    
        //base case
        if (x == 0 || x == 1) 
           return x;
     
        long long int start = 1, end = x, ans;   
        
        // binary search to find square root of a number
        while (start <= end) 
        {        
            long long mid = (start + end) / 2;
            
            // check if mid*mid == x
            if (mid*mid == x)
                return mid;
            
            // if mid*mid < x, then iterate on the upper half
            if (mid*mid < x) 
            {
                start = mid + 1;
                ans = mid;
            } 
            // else, iterate for the lower half
            else
                end = mid - 1;        
        }
        return ans;
    }
  

};
