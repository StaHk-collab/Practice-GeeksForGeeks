Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.

Example 1:

Input:
LinkedList = 1 <--> 3 <--> 4 
x = 3
Output: 1 3  
Explanation: After deleting the node at
position 3 (position starts from 1),
the linked list will be now as 1->3.

Example 2:

Input:
LinkedList = 1 <--> 5 <--> 2 <--> 9  
x = 1
Output: 5 2 9

Your Task:
The task is to complete the function deleteNode() which should delete the node at given position and return the head of the linkedlist.

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)

Constraints:
2 <= size of the linked list <= 1000
1 <= x <= N

Solution :

/* Structure of Node
struct Node
{
  int data;
  struct Node *next;
  struct Node *prev;
  
  Node(int x){
      data = x;
      next = NULL;
      prev = NULL;
  }
  
};
*/

class Solution
{
    public:
    
    Node* deleteNode(Node *head_ref, int n)
    {
        /* if list in NULL or invalid position is given */
        if (head_ref == NULL || n <= 0)
            return head_ref;
     
        struct Node* current = head_ref;
        int i;
     
        /* traverse up to the node at position 'n' from
           the beginning */
        for (int i = 1; current != NULL && i < n; i++)
            current = current->next;
     
        /* if 'n' is greater than the number of nodes
           in the doubly linked list */
        if (current == NULL)
            return head_ref;
     
        /* delete the node pointed to by 'current' */
     
        /* If node to be deleted is head node */
        if (head_ref == current)
            head_ref = current->next;
     
        /* Change next only if node to be deleted is NOT
           the last node */
        if (current->next != NULL)
            current->next->prev = current->prev;
     
        /* Change prev only if node to be deleted is NOT
           the first node */
        if (current->prev != NULL)
            current->prev->next = current->next;
            
        return head_ref;
     
        /* Finally, free the memory occupied by del*/
        //free(current);
    }
};
