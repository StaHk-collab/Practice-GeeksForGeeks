Given a string of lowercase alphabets and a number k, the task is to find the minimum value of the string after removal of ‘k’ characters. 
The value of a string is defined as the sum of squares of the count of each distinct character.
For example consider the string “geeks”, here frequencies of characters are g -> 1, e -> 2, k -> 1, s -> 1 and value of the string is 12 + 22 + 12 + 12 = 7
 

Example 1:

Input: S = "abccc", K = 1
Output: 6
Explanation: Remove one 'c', then frequency
will be a -> 1, b -> 1, c -> 2.
12 + 12 + 22 = 6

â€‹Example 2:

Input: S = "aaab", K = 2
Output: 2
Explanation: Remove 2 'a's, then frequency
will be a -> 1, b -> 1.
12 + 12 = 2

Your Task:  
You don't need to read input or print anything. Your task is to complete the function minValue() which takes the string s as inputs and returns the answer.

Expected Time Complexity: O(K*log(|S|))
Expected Auxiliary Space: O(constant)

Constraints:
1 ≤ K, |S| ≤ 10^4

Solution :

class Solution{
public:
	int minValue(string S, int K)
	{
		int l = S.length(); // find length of string 
	  
	    // if K is greater than length of string 
	    // so reduced string will become 0 
	    if (K >= l) 
	        return 0; 

	    int MAX_CHAR = 26;
	  
	    // Else find Frequency of each character and 
	    // store in an array 
	    int frequency[MAX_CHAR] = {0}; 
	    for (int i = 0; i < l; i++) 
	        frequency[S[i]-'a']++; 
	  
	    // Push each char frequency into a priority_queue 
	    priority_queue<int> q; 
	    for (int i=0; i < MAX_CHAR; i++) 
	        q.push(frequency[i]); 
	  
	  
	    // Removal of K characters 
	    while (K--) 
	    { 
	        // Get top element in priority_queue, 
	        // remove it. Decrement by 1 and again 
	        // push into priority_queue 
	        int temp = q.top(); 
	        q.pop(); 
	        temp = temp-1; 
	        q.push(temp); 
	    } 
	  
	    // After removal of K characters find sum 
	    // of squares of string Value 
	    int result = 0; // Initialize result 
	    while (!q.empty()) 
	    { 
	        int temp = q.top(); 
	        result += temp*temp; 
	        q.pop(); 
	    } 
	  
	    return result; 
	}
};
