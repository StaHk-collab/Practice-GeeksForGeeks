Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.


Example 1:

Input: 
N = 5
arr[]= {0 2 1 2 0}
Output:
0 0 1 2 2
Explanation:
0s 1s and 2s are segregated 
into ascending order.

Example 2:

Input: 
N = 3
arr[] = {0 1 0}
Output:
0 0 1
Explanation:
0s 1s and 2s are segregated 
into ascending order.


Your Task:
You don't need to read input or print anything. Your task is to complete the function sort012() that takes an array arr and N as input parameters and sorts the array in-place.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints:
1 <= N <= 10^6
0 <= A[i] <= 2

Solution :

class Solution
{
    public:
    void sort012(int a[], int n)
    {
        vector<int> v1;
        vector<int> v2;
        vector<int> v3;
        for(int i=0;i<n;i++) {
            if(a[i] == 0)
            v1.push_back(a[i]);
        }
        for(int i=0;i<n;i++) {
            if(a[i] == 1)
            v2.push_back(a[i]);
        }
        for(int i=0;i<n;i++) {
            if(a[i] == 2)
            v3.push_back(a[i]);
        }
        for(int i=0;i<v1.size();i++)
        a[i] = v1[i];
        for(int i=0;i<v2.size();i++)
        a[i + v1.size()] = v2[i];
        for(int i=0;i<v3.size();i++)
        a[i + v1.size() + v2.size()] = v3[i];
    }
    
};
