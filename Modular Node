Given a singly linked list and a number K, you are required to complete the function modularNode() which returns the modular node of the linked list.
A modular node is the last node of the linked list whose Index is divisible by the number K, i.e. i%k==0.

Example 1:

Input: LinkedList: 1->2->3->4->5->6->7
       k = 3
Output: 6
Explanation: Node from the last which 
is divisible by 3 is 6

Example 2:

Input: LinkedList: 19->28->37->46->55
           k = 2
Output: 46
Explanation: Node from the last which
is divisible by 2 is 46

Constraints:
1 <= T <= 100
1 <= N <= 500

Solution I :

/*Struture of the node of the linked list is as:

struct Node {
	int data;
	struct Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};
*/
// Your task is to complete the function
// function should return the modular Node
// if no such node is present then return -1

Node* reverse(Node* temp) {
    
    if(temp == NULL || temp -> next == NULL)
    return temp;
    struct Node* tmp = reverse(temp -> next);
    temp -> next -> next = temp;
    temp -> next = NULL;
    return tmp;
}

int modularNode(Node* head, int k)
{
    Node* temp1 = head;
    int nodes = 0;
    while(temp1 != NULL) {
        nodes++;
        temp1 = temp1 -> next;
    }
	Node* temp = head;
	Node* ans = reverse(temp);
	for(int i=nodes;i>0;i--){
	    if(i % k  == 0)
	    return ans -> data;
	    ans = ans -> next;
	}
	return -1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution II :

int modularNode(Node* head, int k)
{
	if (k <= 0 || head == NULL)return -1; 
	int i = 1;
	Node* modularNode = NULL;
	for (Node* temp = head; temp != NULL; temp = temp->next) {
		if (i % k == 0) 
			modularNode = temp;
		
		i++;
	}
	if(modularNode==NULL)return -1;
	return modularNode->data;
}
