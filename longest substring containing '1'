Given a function that takes a binary string. The task is to return the longest size of contiguous substring containing only ‘1’.

Input:
The first line of input contains an integer T denoting the no of test cases.Then T test cases follow. Each test case contains a string S.

Output:
For each test case return the maximum length of required sub string.

Constraints: 
1<=T<=100
1<=|string length|<=104

Example:
Input:
2
110
11101110
Output:
2
3

Solution :

int maxlength(string s)
{
    int count = 0;
    int max = 0;
    int d = 0;
    for(int i=0;i<s.size()-1;i++) {
        if(s[i] == '1') {
        if(s[i] == s[i+1]) {
            count++;
        } else {
            if(count > max)
            max = count;
            count = 0;
        }
        } else {
            d++;
        }
    }
    if(count > max)
    return count + 1;
    else if((s.size() == d+1) && (s[s.size()-1] == '1'))
    return 1;
    else if(d+1 == s.size())
    return 0;
    else
    return max + 1;
}
